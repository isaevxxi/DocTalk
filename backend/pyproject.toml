[tool.poetry]
name = "doktalk-backend"
version = "1.0.0"
description = "DokTalk Backend - Ambient Clinical Scribe for Russian Healthcare"
authors = ["DokTalk Team"]
readme = "README.md"
license = "Proprietary"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.12,<3.13"
# Web framework
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.32.0"}
pydantic = {extras = ["email"], version = "^2.9.0"}
pydantic-settings = "^2.5.0"

# Database
asyncpg = "^0.30.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.35"}
alembic = "^1.13.3"
psycopg2-binary = "^2.9.9"

# Vector search
pgvector = "^0.3.5"

# Cache & message broker
redis = {extras = ["hiredis"], version = "^5.2.0"}
arq = "^0.26.1"  # Async task queue (replaces Celery for asyncio)

# Object storage
minio = "^7.2.10"

# Security & auth
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.17"
hvac = "^2.3.0"  # HashiCorp Vault client

# Observability
opentelemetry-api = "^1.28.2"
opentelemetry-sdk = "^1.28.2"
opentelemetry-exporter-otlp = "^1.28.2"
opentelemetry-instrumentation-fastapi = "^0.49b2"
opentelemetry-instrumentation-sqlalchemy = "^0.49b2"
opentelemetry-instrumentation-redis = "^0.49b2"
prometheus-client = "^0.21.0"
python-json-logger = "^3.2.1"

# ML/ASR
torch = {version = "^2.5.1", optional = true}
faster-whisper = "^1.0.3"
silero-vad = "^5.1.2"
pyannote-audio = "^3.3.2"
librosa = "^0.10.2"
soundfile = "^0.12.1"

# WebRTC
aiortc = "^1.9.0"
aioice = "^0.9.0"

# Utilities
python-dateutil = "^2.9.0"
httpx = "^0.27.2"
tenacity = "^9.0.0"
orjson = "^3.10.11"
pydub = "^0.25.1"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^6.0.0"
pytest-env = "^1.1.5"
pytest-mock = "^3.14.0"
httpx = "^0.27.2"
faker = "^33.1.0"

# Linting & formatting
ruff = "^0.8.4"
black = "^24.10.0"
mypy = "^1.13.0"
pre-commit = "^4.0.1"

# Type stubs
types-redis = "^4.6.0"
types-passlib = "^1.7.7"
types-python-jose = "^3.3.4"
types-python-dateutil = "^2.9.0"

[tool.poetry.extras]
ml = ["torch", "faster-whisper", "silero-vad", "pyannote-audio", "librosa", "soundfile"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# =============================================================================
# Ruff Configuration (linting & formatting)
# =============================================================================
[tool.ruff]
line-length = 100
target-version = "py312"
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "alembic/versions",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/**/*" = ["ARG"]    # unused arguments in tests

[tool.ruff.lint.isort]
known-first-party = ["app"]

# =============================================================================
# Black Configuration (code formatting)
# =============================================================================
[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | __pycache__
  | alembic/versions
  | build
  | dist
)/
'''

# =============================================================================
# MyPy Configuration (type checking)
# =============================================================================
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = false
disallow_any_generics = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
strict_optional = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# =============================================================================
# Pytest Configuration
# =============================================================================
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "security: marks tests as security-related",
    "rls: marks tests as RLS (Row-Level Security) tests",
]
env = [
    "APP_ENV=test",
    "DATABASE_URL=postgresql+asyncpg://doktalk_test:test@localhost:5432/doktalk_test",
]

# =============================================================================
# Coverage Configuration
# =============================================================================
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
