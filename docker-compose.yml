version: '3.9'

services:
  # =============================================================================
  # Database - PostgreSQL 16 with pgvector
  # =============================================================================
  postgres:
    image: pgvector/pgvector:pg16
    container_name: doktalk-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-doktalk}
      POSTGRES_USER: ${POSTGRES_USER:-doktalk_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change-this-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=ru_RU.UTF-8"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "log_statement=mod"
      - "-c"
      - "log_duration=on"
      - "-c"
      - "log_min_duration_statement=100"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-doktalk_user} -d ${POSTGRES_DB:-doktalk}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - doktalk-network
    restart: unless-stopped

  # =============================================================================
  # Cache & Message Broker - Redis 8.2.2+
  # =============================================================================
  redis:
    image: redis:8.2.2-alpine
    container_name: doktalk-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-change-this-redis-password}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - doktalk-network
    restart: unless-stopped

  # =============================================================================
  # Object Storage - MinIO (S3-compatible, WORM enabled)
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: doktalk-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin-change-this}
      MINIO_REGION: ${MINIO_REGION:-ru-central-1}
      MINIO_BROWSER: "on"
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - doktalk-network
    restart: unless-stopped

  # MinIO client to create buckets and enable object lock
  minio-init:
    image: minio/mc:latest
    container_name: doktalk-minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set doktalk http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin-change-this};
      mc mb --ignore-existing doktalk/${MINIO_BUCKET_MEDIA:-doktalk-media};
      mc mb --ignore-existing doktalk/${MINIO_BUCKET_EXPORTS:-doktalk-exports};
      mc mb --ignore-existing doktalk/${MINIO_BUCKET_BACKUPS:-doktalk-backups};
      mc version enable doktalk/${MINIO_BUCKET_MEDIA:-doktalk-media};
      mc version enable doktalk/${MINIO_BUCKET_EXPORTS:-doktalk-exports};
      mc version enable doktalk/${MINIO_BUCKET_BACKUPS:-doktalk-backups};
      echo 'MinIO buckets initialized with versioning';
      exit 0;
      "
    networks:
      - doktalk-network

  # =============================================================================
  # Secrets Management - HashiCorp Vault
  # =============================================================================
  vault:
    image: hashicorp/vault:latest
    container_name: doktalk-vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN:-dev-only-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./scripts/vault-init.sh:/vault-init.sh:ro
    command: server -dev
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - doktalk-network
    restart: unless-stopped

  # =============================================================================
  # WebRTC - Jitsi Videobridge (SFU)
  # =============================================================================
  jitsi:
    image: jitsi/jvb:stable
    container_name: doktalk-jitsi
    environment:
      - DOCKER_HOST_ADDRESS=${JITSI_HOST:-localhost}
      - JVB_AUTH_USER=jvb
      - JVB_AUTH_PASSWORD=${JITSI_PASSWORD:-change-this-jitsi-password}
      - JVB_PORT=${JITSI_PORT:-10000}
      - JVB_TCP_HARVESTER_DISABLED=false
      - JVB_STUN_SERVERS=stun.l.google.com:19302
    ports:
      - "${JITSI_PORT:-10000}:10000/udp"
      - "4443:4443"
    networks:
      - doktalk-network
    restart: unless-stopped

  # =============================================================================
  # TURN/STUN Server - coturn
  # =============================================================================
  coturn:
    image: coturn/coturn:latest
    container_name: doktalk-coturn
    environment:
      - DETECT_EXTERNAL_IP=yes
      - DETECT_RELAY_IP=yes
    ports:
      - "${TURN_PORT:-3478}:3478/udp"
      - "${TURN_PORT:-3478}:3478/tcp"
      - "5349:5349/udp"
      - "5349:5349/tcp"
      - "49152-65535:49152-65535/udp"
    volumes:
      - ./scripts/turnserver.conf:/etc/coturn/turnserver.conf:ro
    networks:
      - doktalk-network
    restart: unless-stopped

  # =============================================================================
  # Observability - Jaeger (Distributed Tracing)
  # =============================================================================
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: doktalk-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "6831:6831/udp"  # Jaeger agent
      - "6832:6832/udp"  # Jaeger agent
      - "5778:5778"      # Serve configs
      - "16686:16686"    # Jaeger UI
      - "4317:4317"      # OTLP gRPC
      - "4318:4318"      # OTLP HTTP
      - "14250:14250"    # Jaeger gRPC
      - "14268:14268"    # Jaeger HTTP
    networks:
      - doktalk-network
    restart: unless-stopped

  # =============================================================================
  # Observability - Prometheus (Metrics)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: doktalk-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - doktalk-network
    restart: unless-stopped

  # =============================================================================
  # Observability - Loki (Logs)
  # =============================================================================
  loki:
    image: grafana/loki:latest
    container_name: doktalk-loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - doktalk-network
    restart: unless-stopped

  # =============================================================================
  # Observability - Grafana (Dashboards)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: doktalk-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-change-this-grafana-password}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
      - loki
      - jaeger
    networks:
      - doktalk-network
    restart: unless-stopped

# =============================================================================
# Networks
# =============================================================================
networks:
  doktalk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# =============================================================================
# Volumes (persistent data)
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  vault_data:
    driver: local
  vault_logs:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local
